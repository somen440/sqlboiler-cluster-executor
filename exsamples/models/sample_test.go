// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSamples(t *testing.T) {
	t.Parallel()

	query := Samples()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSamplesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sample{}
	if err = randomize.Struct(seed, o, sampleDBTypes, true, sampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sample struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Samples().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSamplesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sample{}
	if err = randomize.Struct(seed, o, sampleDBTypes, true, sampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sample struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Samples().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Samples().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSamplesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sample{}
	if err = randomize.Struct(seed, o, sampleDBTypes, true, sampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sample struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SampleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Samples().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSamplesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sample{}
	if err = randomize.Struct(seed, o, sampleDBTypes, true, sampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sample struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SampleExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Sample exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SampleExists to return true, but got false.")
	}
}

func testSamplesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sample{}
	if err = randomize.Struct(seed, o, sampleDBTypes, true, sampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sample struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	sampleFound, err := FindSample(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if sampleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSamplesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sample{}
	if err = randomize.Struct(seed, o, sampleDBTypes, true, sampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sample struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Samples().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSamplesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sample{}
	if err = randomize.Struct(seed, o, sampleDBTypes, true, sampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sample struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Samples().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSamplesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sampleOne := &Sample{}
	sampleTwo := &Sample{}
	if err = randomize.Struct(seed, sampleOne, sampleDBTypes, false, sampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sample struct: %s", err)
	}
	if err = randomize.Struct(seed, sampleTwo, sampleDBTypes, false, sampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sample struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sampleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sampleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Samples().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSamplesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	sampleOne := &Sample{}
	sampleTwo := &Sample{}
	if err = randomize.Struct(seed, sampleOne, sampleDBTypes, false, sampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sample struct: %s", err)
	}
	if err = randomize.Struct(seed, sampleTwo, sampleDBTypes, false, sampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sample struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sampleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sampleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Samples().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func sampleBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Sample) error {
	*o = Sample{}
	return nil
}

func sampleAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Sample) error {
	*o = Sample{}
	return nil
}

func sampleAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Sample) error {
	*o = Sample{}
	return nil
}

func sampleBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Sample) error {
	*o = Sample{}
	return nil
}

func sampleAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Sample) error {
	*o = Sample{}
	return nil
}

func sampleBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Sample) error {
	*o = Sample{}
	return nil
}

func sampleAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Sample) error {
	*o = Sample{}
	return nil
}

func sampleBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Sample) error {
	*o = Sample{}
	return nil
}

func sampleAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Sample) error {
	*o = Sample{}
	return nil
}

func testSamplesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Sample{}
	o := &Sample{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, sampleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Sample object: %s", err)
	}

	AddSampleHook(boil.BeforeInsertHook, sampleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	sampleBeforeInsertHooks = []SampleHook{}

	AddSampleHook(boil.AfterInsertHook, sampleAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	sampleAfterInsertHooks = []SampleHook{}

	AddSampleHook(boil.AfterSelectHook, sampleAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	sampleAfterSelectHooks = []SampleHook{}

	AddSampleHook(boil.BeforeUpdateHook, sampleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	sampleBeforeUpdateHooks = []SampleHook{}

	AddSampleHook(boil.AfterUpdateHook, sampleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	sampleAfterUpdateHooks = []SampleHook{}

	AddSampleHook(boil.BeforeDeleteHook, sampleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	sampleBeforeDeleteHooks = []SampleHook{}

	AddSampleHook(boil.AfterDeleteHook, sampleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	sampleAfterDeleteHooks = []SampleHook{}

	AddSampleHook(boil.BeforeUpsertHook, sampleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	sampleBeforeUpsertHooks = []SampleHook{}

	AddSampleHook(boil.AfterUpsertHook, sampleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	sampleAfterUpsertHooks = []SampleHook{}
}

func testSamplesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sample{}
	if err = randomize.Struct(seed, o, sampleDBTypes, true, sampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sample struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Samples().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSamplesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sample{}
	if err = randomize.Struct(seed, o, sampleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Sample struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(sampleColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Samples().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSamplesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sample{}
	if err = randomize.Struct(seed, o, sampleDBTypes, true, sampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sample struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSamplesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sample{}
	if err = randomize.Struct(seed, o, sampleDBTypes, true, sampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sample struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SampleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSamplesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sample{}
	if err = randomize.Struct(seed, o, sampleDBTypes, true, sampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sample struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Samples().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	sampleDBTypes = map[string]string{`ID`: `bigint`, `Name`: `varchar`, `Created`: `datetime`, `Modified`: `datetime`}
	_             = bytes.MinRead
)

func testSamplesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(samplePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(sampleAllColumns) == len(samplePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Sample{}
	if err = randomize.Struct(seed, o, sampleDBTypes, true, sampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sample struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Samples().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sampleDBTypes, true, samplePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Sample struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSamplesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(sampleAllColumns) == len(samplePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Sample{}
	if err = randomize.Struct(seed, o, sampleDBTypes, true, sampleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sample struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Samples().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sampleDBTypes, true, samplePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Sample struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(sampleAllColumns, samplePrimaryKeyColumns) {
		fields = sampleAllColumns
	} else {
		fields = strmangle.SetComplement(
			sampleAllColumns,
			samplePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SampleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSamplesUpsert(t *testing.T) {
	t.Parallel()

	if len(sampleAllColumns) == len(samplePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLSampleUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Sample{}
	if err = randomize.Struct(seed, &o, sampleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Sample struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Sample: %s", err)
	}

	count, err := Samples().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, sampleDBTypes, false, samplePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Sample struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Sample: %s", err)
	}

	count, err = Samples().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
